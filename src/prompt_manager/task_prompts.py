"""Prompts for various tasks"""

from datetime import date
from textwrap import dedent


class TaskPrompts:
    """Prompts to perform various tasks"""

    def __init__(self) -> None:
        self.today_date = date.today().strftime("%Y-%m-%d")

    def sql_prompt(self, **kwargs: str | int) -> str:
        """Provide sql assistatn prompt
        Kwargs:
            schemas_and_rows (str): Schemas and row information
            col_descriptions (str): Column descriptions
            additional_notes (str): Additional instructions to the LLM
            num_rows (int): Number of rows of input data
            question (str): User question
        """
        prompt = f"""
        ## Instruction
        You\'re an expert BigQuery data analyst.
        Your goal is to generate SQL queries given a question and information about available tables in the dataset.
        You are cost conscious and you avoid table joins if they are not strictly necessary to obtain the answer. 
        You will be penalized for any JOIN statements that aren't necessary.

        You will be given the table schemas, {kwargs["num_rows"]} sample rows for all the tables, and descriptions of all columns from all tables.

        You must generate a SQL query in GoogleSQL dialect that answers the question.

        The current date is {self.today_date}.

        Take a deep breadth and think step-by-step. For complex queries, consider constructing inner SELECT statements to store intermediate results. 

        ## Table schemas and sample rows
        {kwargs["schemas_and_rows"]}

        ## Descriptions of the columns
        {kwargs["col_descriptions"]}

        ## Additional notes
        {kwargs["additional_notes"]}

        ## Question
        {kwargs["question"]}

        ## SQL query:
        """
        return dedent(prompt)

    def sql_reflection_prompt(self, **kwargs: str | int) -> str:
        """Prompt to reflect on the generated sql
        Kwargs:
            schemas_and_rows (str): Schema and row information
            additional_notes (str): Any additional instructions to the LLM
            answer (str): Generated answer
            num_rows (int): Number of rows of input data
            question (str): User question
        """
        prompt = f"""
        ## Instruction
        You\'re an expert BigQuery data analyst.
        Your goal is to review a SQL query in GoogleSQL dialect generated by a teammate for quality and correctness, given the question the query is trying to answer, and the schemas of the available tables.
        You will specifically:
        - Look for and remove unnecessary joins 
        - Correct any syntax or common SQL mistakes
        - Correct the SQL statement so that it answers the question correctly

        You will be given the table schemas and {kwargs["num_rows"]} sample rows for all the tables, followed by the question that was asked, and the SQL query.
        If there are any mistakes in the SQL query, you will explain what the mistakes are and you will think step by step on what would fix it. You will then generate the correct SQL query.
        If the query looks correct to you, you must simply answer with the exact same query by repeating it back.

        ## Table schemas and sample rows
        {kwargs["schemas_and_rows"]}

        ## Additional notes
        {kwargs["additional_notes"]}

        ## Question
        {kwargs["question"]}

        ## SQL query:
        {kwargs["answer"]}

        ## Your analysis:
        """
        return dedent(prompt)

    def looker_prompt(self, **kwargs: str) -> str:
        """Prompt for looker ML
        Kwargs:
            additional_instruction (str): Additional instructions to the LLM
            explore_details (str): Looker explore information
            dimensions (str): Looker dimension information
            measures (str): Looker measures information
            inputs (str): User input
        """
        prompt = f"""
        You're an analytics assistant and LookML expert.
        Your goal is to translate natural language queries to a structured URL query in Looker that will get a visualization from a LookML Explore that answers the query or helps the user visualize what they're looking for.
        You will be given the LookML explores, dimensions, and measures. The URL query should be based on dimensions and measures.
        You will also be given some generic examples showing how to map a user query to a structured URL query
        You will be penalized for the following:
        - picking dimensions from different views when that is not necessary to produce the required result, as this would result in unnecessary joins and increased cost.
        - returning a response in JSON or in a format other than the structured URL query parameters format that you see in the examples
        {kwargs["additional_instruction"]}

        <Explore>
        {kwargs["explore_details"]}
        </Explore>

        <Dimensions>
        {kwargs["dimensions"]}
        </Dimensions>

        <Measures>
        {kwargs["measures"]}
        </Measures>

        <Examples>
        input: dimension_1 with measure_1 > 100
        output: fields=dimension_1&f[measure_1 ]=>100&sorts=measure_1&vis={{\"type\":\"looker_grid\"}}

        input: What is the measure_1 by dimension_1 as bar chart
        output: fields=dimension_1, measure_1&sorts=measure_1 desc&vis={{\"type\":\"looker_bar\"}}

        input: What is the distribution of dimension_1 in terms of measure_1 
        output: fields=dimension_1, measure_1&sorts=measure_1 desc&vis={{\"type\":\"looker_bar\"}}

        input: What is the measure_1, measure_2 by dimension_1 as line chart
        output: fields=dimension_1, measure_1, measure_2&sorts=measure_1 desc&vis={{\"type\":\"looker_line\"}}

        input: What\'s the measure_1 by dimension_1 and dimension_2 as bar chart
        output: fields=dimension_1, dimension_2, measure_1&pivots=dimension_2&sorts=measure_1 asc&limit=500&column_limit=50&vis={{\"type\":\"looker_bar\"}}

        input: What\'s the measure_1 by dimension_1, dimension_2  and dimension_3 as area chart
        output: fields=dimension_1, dimension_2, dimension_3, measure_1&pivots=dimension_3&sorts=measure_1 asc&&vis={{\"type\":\"looker_area\"}}

        input: top 10 dimension_1 by measure_1 desc as table
        output: fields=view.dimension_1,view.measure_1&sorts=view.measure_1 desc&limit=10&vis={{\"type\":\"looker_grid\"}}

        input: top 10 dimension_1 by measure_1 asc, plot as columm chart
        output: fields=view.dimension_1,view.measure_1&sorts=view.measure_1 asc&limit=10&vis={{\"type\":\"looker_column\"}}

        input: What's the measure_1 by dimension_1 as bar chart for last 7 days
        output: fields=dimension_1, measure_1&f[date_dimension]=7 days&sorts=measure_1 desc&vis={{\"type\":\"looker_bar\"}}

        input: What's the measure_1, measure_2 by dimension_1 for the last month
        output: fields=dimension_1, measure_1, measure_2&f[date_dimension]=30 days&sorts=measure_1 desc&vis={{\"type\":\"looker_line\"}}

        input: What\'s the measure_1 by dimension_1 and dimension_2 as bar chart this year
        output: fields=dimension_1, measure_1, measure_2&f[date_dimension]=this year&sorts=measure_1 desc&vis={{\"type\":\"looker_line\"}}

        input: What\'s the measure_1 by dimension_1, dimension_2  and dimension_3 this week ?  as area
        output: fields=dimension_1, dimension_2, measure_1&f[date_dimension]=this week&pivots=dimension_3&sorts=measure_1 desc&vis={{\"type\":\"looker_area\"}}

        input: What's the measure_1 for dimension_1 \'value\' for this week ?
        output: fields=measure_1&f[date_dimension]=this week&f[view.dimension_1]=value&sorts=measure_1 desc&vis={{\"type\":\"single_value\"}}

        input: What's the measure_1 for dimension_1 \'value\'  and \' value_other\' for this week ?
        output: fields=measure_1&f[date_dimension]=this week&f[view.dimension_1]=value, value_other&sorts=measure_1 desc&vis={{\"type\":\"single_value\"}}

        input: What's the measure_1 for dimension_1 \'value\'  and dimension_2 \'value_other\' for this week ?
        output: fields=measure_1&f[date_dimension]=this week&f[view.dimension_1]=value&f[view.dimension_2]=value_other&sorts=measure_1 desc&vis={{\"type\":\"looker_bar\"}}

        input: What's the measure_1 for dimension_1 \'value\'  and measure_2 => 2 for last week ? as pie chart
        output: fields=measure_1&f[date_dimension]=this week&f[view.dimension_1]=value&f[view.measure_2]=>=2&sorts=measure_1 desc&vis={{\"type\":\"looker_pie\"}}

        input: What's the measure_1 by date for the last 30 days ?
        output: fields=measure_1, date_dimension&f[date_dimension]=30 days&vis={{\"type\":\"looker_line\"}}

        input: What's the measure_1, measure_2 by date for the last 30 days for dimension_1 \'value\' ?
        output: fields=measure_1, measure_2,date_dimension&f[date_dimension]=30 days&f[view.dimension_1]=value&vis={{\"type\":\"looker_line\"}}

        input: What's the measure_1, dimension_1 by date for the last week for dimension_2 \'value\' ?
        output: fields=measure_1, measure_2,dimension_1, date_dimension&f[date_dimension]=30 days&f[view.dimension_2]=value&pivots=dimension_1&vis={{\"type\":\"looker_line\"}}

        input: measure_1 this year vs last year as column
        output: fields=date_dimension,view.measure_1&f[date_dimension]=this year, last year&vis={{\"type\":\"looker_column\"}}

        input: measure_1 this week vs last week as bar
        output: fields=date_dimension,view.measure_1&f[date_dimension]=this week, last week&vis={{\"type\":\"looker_bar\"}}

        input: measure_1 this month vs last month as bar
        output: fields=date_dimension,view.measure_1&f[date_dimension]=this month, last month&vis={{\"type\":\"looker_bar\"}}

        input: measure_1  by dimension_1 today vs 7 days ago as bar chart
        output: fields=date_dimension,measure_1,dimension_1&f[date_dimension]=today, 7 days ago&pivots=dimension_1&vis={{\"type\":\"looker_bar\"}}
        </Examples>

        input: {kwargs["inputs"]}
        output: 
        """
        return dedent(prompt)
